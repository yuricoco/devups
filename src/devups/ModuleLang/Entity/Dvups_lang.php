<?php
// user \dclass\devups\model\Model;

/**
 * @Entity @Table(name="dvups_lang")
 * */
class Dvups_lang extends Model implements JsonSerializable
{

    /**
     * @Id @GeneratedValue @Column(type="integer")
     * @var int
     * */
    protected $id;
    /**
     * @Column(name="name", type="string" , length=150 )
     * @var string
     **/
    protected $name;
    /**
     * @Column(name="main", type="integer" , nullable=true )
     * @var int
     **/
    protected $main;
    /**
     * @Column(name="active", type="text"  )
     * @var text
     **/
    protected $active;
    /**
     * @Column(name="iso_code", type="string" , length=55 )
     * @var string
     **/
    protected $iso_code;
    /**
     * @Column(name="language_code", type="string" , length=55 )
     * @var string
     **/
    protected $language_code;
    /**
     * @Column(name="locale", type="string" , length=2 )
     * @var string
     **/
    protected $locale;
    /**
     * @Column(name="date_format_lite", type="string" , length=10 )
     * @var string
     **/
    protected $date_format_lite;
    /**
     * @Column(name="date_format_full", type="string" , length=15 )
     * @var string
     **/
    protected $date_format_full;


    public function __construct($id = null)
    {

        if ($id) {
            $this->id = $id;
        }

    }

    public function getId()
    {
        return $this->id;
    }

    public function getName()
    {
        return $this->name;
    }

    public function setName($name)
    {
        $this->name = $name;
    }

    public function getActive()
    {
        return $this->active;
    }

    public function setActive($active)
    {
        $this->active = $active;
    }

    public function getIso_code()
    {
        return $this->iso_code;
    }

    public function setIso_code($iso_code)
    {
        $this->iso_code = $iso_code;
    }

    public function getLanguage_code()
    {
        return $this->language_code;
    }

    public function setLanguage_code($language_code)
    {
        $this->language_code = $language_code;
    }

    public function getLocale()
    {
        return $this->locale;
    }

    public function setLocale($locale)
    {
        $this->locale = $locale;
    }

    public function getDate_format_lite()
    {
        return $this->date_format_lite;
    }

    public function setDate_format_lite($date_format_lite)
    {
        $this->date_format_lite = $date_format_lite;
    }

    public function getDate_format_full()
    {
        return $this->date_format_full;
    }

    public function setDate_format_full($date_format_full)
    {
        $this->date_format_full = $date_format_full;
    }

    /**
     * @return int
     */
    public function getMain()
    {
        return $this->main;
    }

    /**
     * @param int $main
     */
    public function setMain($main)
    {
        $this->main = $main;
    }

    public function jsonSerialize()
    {
        return [
            'id' => $this->id,
            'name' => $this->name,
            'active' => $this->active,
            'iso_code' => $this->iso_code,
            'language_code' => $this->language_code,
            'locale' => $this->locale,
            'date_format_lite' => $this->date_format_lite,
            'date_format_full' => $this->date_format_full,
        ];
    }

    public function __delete($exec = true)
    {
        Local_content::where("lang", $this->iso_code)->delete();
        return parent::__delete($exec); // TODO: Change the autogenerated stub
    }

    public static function defaultLang(){
        if ($iso = Request::get('lang'))
            $lang = self::where("this.iso_code", $iso)->firstOrNull();
        else
            $lang = self::where("this.main", 1)->firstOrNull();

        if (!$lang)
            $lang = self::first();

        return $lang;
    }

    public static function otherLangs($default = __lang){
        return self::where("iso_code", "!=", $default)->get();
    }

    /**
     * @return $this
     */
    public static function currentLang(){
        return self::where("iso_code", local())->first();
    }

}
