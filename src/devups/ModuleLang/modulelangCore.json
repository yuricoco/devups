{
  "name": "ModuleLang",
  "project": "devups",
  "id": 5,
  "listentity": [
    {
      "attribut": [
        {
          "name": "id",
          "designation": "",
          "visibility": "",
          "datatype": "integer",
          "size": "",
          "nullable": "not",
          "formtype": "",
          "comment": ""
        },
        {
          "name": "reference",
          "designation": "",
          "visibility": "",
          "datatype": "string",
          "size": "255",
          "nullable": "not",
          "formtype": "text",
          "comment": ""
        }
      ],
      "relation": [],
      "name": "local_content_key",
      "id": 1,
      "module": {
        "id": 5,
        "name": "ModuleLang"
      },
      "relations": [],
      "apidoc": [
        {
          "name": "Create local_content_key",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"local_content_key\":{\"id\":\"\",\"reference\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}local-content_key.create",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content_key.create"
              ]
            },
            "description": "Create local-content_key"
          },
          "response": []
        },
        {
          "name": "Get local_content_key",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content_key.detail?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content_key.detail"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Get local-content_key"
          },
          "response": []
        },
        {
          "name": "List local_content_key",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content_key.lazyloading?dfilters=on&next=1&per_page=10",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content_key.lazyloading"
              ],
              "query": [
                {
                  "key": "dfilters",
                  "value": "on"
                },
                {
                  "key": "next",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "API documentation for LibrairieNumérique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"
          },
          "response": []
        },
        {
          "name": "Update local_content_key",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"local_content_key\":{\"id\":\"\",\"reference\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}local-content_key.update?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content_key.update"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Update local-content_key"
          },
          "response": []
        },
        {
          "name": "Delete local_content_key",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content_key.delete?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content_key.delete"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Delete local-content_key"
          },
          "response": []
        }
      ]
    },
    {
      "attribut": [
        {
          "name": "id",
          "designation": "",
          "visibility": "",
          "datatype": "integer",
          "size": "",
          "nullable": "not",
          "formtype": "",
          "comment": ""
        },
        {
          "name": "reference",
          "designation": "the one of local key",
          "visibility": "",
          "datatype": "string",
          "size": "255",
          "nullable": "not",
          "formtype": "text",
          "comment": ""
        },
        {
          "name": "content",
          "designation": "",
          "visibility": "",
          "datatype": "text",
          "size": "",
          "nullable": "not",
          "formtype": "textarea",
          "comment": ""
        }
      ],
      "relation": [
        {
          "entity": "local_content_key",
          "cardinality": "manyToOne"
        }
      ],
      "name": "local_content",
      "id": 2,
      "module": {
        "id": 5,
        "name": "ModuleLang"
      },
      "relations": [
        {
          "entity": "local_content_key",
          "cardinality": "manyToOne"
        }
      ],
      "apidoc": [
        {
          "name": "Create local_content",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"local_content\":{\"id\":\"\",\"reference\":\"\",\"content\":\"\",\"local_content_key.id\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}local-content.create",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content.create"
              ]
            },
            "description": "Create local-content"
          },
          "response": []
        },
        {
          "name": "Get local_content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content.detail?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content.detail"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Get local-content"
          },
          "response": []
        },
        {
          "name": "List local_content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content.lazyloading?dfilters=on&next=1&per_page=10",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content.lazyloading"
              ],
              "query": [
                {
                  "key": "dfilters",
                  "value": "on"
                },
                {
                  "key": "next",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "API documentation for LibrairieNumérique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"
          },
          "response": []
        },
        {
          "name": "Update local_content",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"local_content\":{\"id\":\"\",\"reference\":\"\",\"content\":\"\",\"local_content_key.id\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}local-content.update?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content.update"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Update local-content"
          },
          "response": []
        },
        {
          "name": "Delete local_content",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}local-content.delete?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "local-content.delete"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Delete local-content"
          },
          "response": []
        }
      ]
    },
    {
      "attribut": [
        {
          "name": "id",
          "designation": "",
          "visibility": "",
          "datatype": "integer",
          "size": "",
          "nullable": "not",
          "formtype": "",
          "comment": ""
        },
        {
          "name": "base_url",
          "designation": "",
          "visibility": "",
          "datatype": "string",
          "size": "255",
          "nullable": "not",
          "formtype": "text",
          "comment": ""
        }
      ],
      "relation": [],
      "name": "page_mapped",
      "id": 3,
      "module": {
        "id": 5,
        "name": "ModuleLang"
      },
      "relations": [],
      "apidoc": [
        {
          "name": "Create page_mapped",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"page_mapped\":{\"id\":\"\",\"base_url\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}page-mapped.create",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-mapped.create"
              ]
            },
            "description": "Create page-mapped"
          },
          "response": []
        },
        {
          "name": "Get page_mapped",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-mapped.detail?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-mapped.detail"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Get page-mapped"
          },
          "response": []
        },
        {
          "name": "List page_mapped",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-mapped.lazyloading?dfilters=on&next=1&per_page=10",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-mapped.lazyloading"
              ],
              "query": [
                {
                  "key": "dfilters",
                  "value": "on"
                },
                {
                  "key": "next",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "API documentation for LibrairieNumérique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"
          },
          "response": []
        },
        {
          "name": "Update page_mapped",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"page_mapped\":{\"id\":\"\",\"base_url\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}page-mapped.update?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-mapped.update"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Update page-mapped"
          },
          "response": []
        },
        {
          "name": "Delete page_mapped",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-mapped.delete?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-mapped.delete"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Delete page-mapped"
          },
          "response": []
        }
      ]
    },
    {
      "attribut": [
        {
          "name": "id",
          "designation": "",
          "visibility": "",
          "datatype": "integer",
          "size": "",
          "nullable": "not",
          "formtype": "",
          "comment": ""
        }
      ],
      "relation": [
        {
          "entity": "page_mapped",
          "cardinality": "manyToOne"
        },
        {
          "entity": "local_content",
          "cardinality": "manyToOne"
        }
      ],
      "name": "page_local_content",
      "id": 4,
      "module": {
        "id": 5,
        "name": "ModuleLang"
      },
      "relations": [
        {
          "entity": "page_mapped",
          "cardinality": "manyToOne"
        },
        {
          "entity": "local_content",
          "cardinality": "manyToOne"
        }
      ],
      "apidoc": [
        {
          "name": "Create page_local_content",
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"page_local_content\":{\"id\":\"\",\"page_mapped.id\":\"\",\"local_content.id\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}page-local_content.create",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-local_content.create"
              ]
            },
            "description": "Create page-local_content"
          },
          "response": []
        },
        {
          "name": "Get page_local_content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-local_content.detail?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-local_content.detail"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Get page-local_content"
          },
          "response": []
        },
        {
          "name": "List page_local_content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-local_content.lazyloading?dfilters=on&next=1&per_page=10",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-local_content.lazyloading"
              ],
              "query": [
                {
                  "key": "dfilters",
                  "value": "on"
                },
                {
                  "key": "next",
                  "value": "1"
                },
                {
                  "key": "per_page",
                  "value": "10"
                }
              ]
            },
            "description": "API documentation for LibrairieNumérique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"
          },
          "response": []
        },
        {
          "name": "Update page_local_content",
          "request": {
            "method": "PUT",
            "header": [],
            "body": {
              "mode": "raw",
              "raw": "{\"page_local_content\":{\"id\":\"\",\"page_mapped.id\":\"\",\"local_content.id\":\"\"}}"
            },
            "url": {
              "raw": "{{base_url}}page-local_content.update?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-local_content.update"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Update page-local_content"
          },
          "response": []
        },
        {
          "name": "Delete page_local_content",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}page-local_content.delete?id=",
              "protocol": "",
              "host": "{{base_url}}",
              "path": [
                "page-local_content.delete"
              ],
              "query": [
                {
                  "key": "id",
                  "value": ""
                }
              ]
            },
            "description": "Delete page-local_content"
          },
          "response": []
        }
      ]
    }
  ],
  "currentIndex": 0
}