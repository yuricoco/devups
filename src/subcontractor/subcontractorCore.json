{"name":"subcontractor","template":"adminv5","listmodule":[{"created_at":null,"updated_at":null,"deleted_at":null,"name":"ModuleEnterprise","jsondata":{"name":"ModuleEnterprise","project":"subcontractor","id":1},"readonly":"0","id":"32","component":{"id":null,"name":null,"project":{"created_at":null,"updated_at":null,"deleted_at":null,"id":null,"ref":null,"name":null,"label":null,"logo":null,"srclogo":"http:\/\/127.0.0.1\/toolrad2\/web\/assets\/no_image.jpg","customer":null,"template":null,"user":{"id":null,"username":null,"firstname":null,"lastname":null,"email":null,"lang":null,"token":null,"password":null,"telephone":null,"country":{"id":null,"name":null,"phonecode":null},"spacekola_ref":null},"components":[],"listmodule":[],"listclass":[],"classcount":0}},"entities":"2","listentity":[{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"name","designation":"","visibility":"","datatype":"string","size":"155","nullable":"not","formtype":"","comment":""},{"name":"about","designation":"","visibility":"","datatype":"string","size":"155","nullable":"not","formtype":"","comment":""},{"name":"email","designation":"","visibility":"","datatype":"string","size":"155","nullable":"not","formtype":"","comment":""},{"name":"logo","designation":"","visibility":"","datatype":"string","size":"255","nullable":"default","formtype":"image","comment":"","nullablevalue":true},{"name":"banner","designation":"","visibility":"","datatype":"string","size":"255","nullable":"default","formtype":"image","comment":"","nullablevalue":true},{"name":"telephone","designation":"","visibility":"","datatype":"string","size":"15","nullable":"not","formtype":"","comment":""},{"name":"website","designation":"","visibility":"","datatype":"string","size":"155","nullable":"default","formtype":"","comment":"","nullablevalue":true}],"relation":[{"entity":"activity_sector","cardinality":"manyToMany"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"enterprise","id":"102","module":{"id":"32","name":"ModuleEnterprise"},"projectid":"5","relations":[{"entity":"activity_sector","cardinality":"manyToMany"}],"apidoc":[{"name":"Create enterprise","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"enterprise\":{\"id\":\"\",\"name\":\"\",\"about\":\"\",\"email\":\"\",\"logo\":\"\",\"banner\":\"\",\"telephone\":\"\",\"website\":\"\",\"activity_sector.id\":\"\"}}"},"url":{"raw":"{{base_url}}enterprise.create","protocol":"","host":"{{base_url}}","path":["enterprise.create"]},"description":"Create enterprise"},"response":[]},{"name":"Get enterprise","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}enterprise.detail?id=","protocol":"","host":"{{base_url}}","path":["enterprise.detail"],"query":[{"key":"id","value":""}]},"description":"Get enterprise"},"response":[]},{"name":"List enterprise","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}enterprise.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["enterprise.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update enterprise","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"enterprise\":{\"id\":\"\",\"name\":\"\",\"about\":\"\",\"email\":\"\",\"logo\":\"\",\"banner\":\"\",\"telephone\":\"\",\"website\":\"\",\"activity_sector.id\":\"\"}}"},"url":{"raw":"{{base_url}}enterprise.update?id=","protocol":"","host":"{{base_url}}","path":["enterprise.update"],"query":[{"key":"id","value":""}]},"description":"Update enterprise"},"response":[]},{"name":"Delete enterprise","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}enterprise.delete?id=","protocol":"","host":"{{base_url}}","path":["enterprise.delete"],"query":[{"key":"id","value":""}]},"description":"Delete enterprise"},"response":[]}]},{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"description","designation":"","visibility":"","datatype":"text","size":"","nullable":"not","formtype":"","comment":""}],"relation":[{"entity":"enterprise","cardinality":"manyToMany"},{"entity":"submission","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"join_venture","id":"106","module":{"id":"32","name":"ModuleEnterprise"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"manyToMany"},{"entity":"submission","cardinality":"manyToOne"}],"apidoc":[{"name":"Create join_venture","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"join_venture\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\",\"submission.id\":\"\"}}"},"url":{"raw":"{{base_url}}join-venture.create","protocol":"","host":"{{base_url}}","path":["join-venture.create"]},"description":"Create join-venture"},"response":[]},{"name":"Get join_venture","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}join-venture.detail?id=","protocol":"","host":"{{base_url}}","path":["join-venture.detail"],"query":[{"key":"id","value":""}]},"description":"Get join-venture"},"response":[]},{"name":"List join_venture","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}join-venture.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["join-venture.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update join_venture","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"join_venture\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\",\"submission.id\":\"\"}}"},"url":{"raw":"{{base_url}}join-venture.update?id=","protocol":"","host":"{{base_url}}","path":["join-venture.update"],"query":[{"key":"id","value":""}]},"description":"Update join-venture"},"response":[]},{"name":"Delete join_venture","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}join-venture.delete?id=","protocol":"","host":"{{base_url}}","path":["join-venture.delete"],"query":[{"key":"id","value":""}]},"description":"Delete join-venture"},"response":[]}]},{"id":0,"name":"enterprise_join_venture","module":{"id":"32","name":"ModuleEnterprise"},"ref":null,"attribut":[{"name":"id","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"text"},{"name":"status","designation":"","visibility":"","datatype":"string","size":"15","nullable":"default","formtype":"","comment":"","nullablevalue":true}],"relation":[{"entity":"join_venture","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"},{"entity":"enterprise","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"}],"owners":["join_venture","enterprise"],"projectid":"5","methods":[{"name":"","datatype":"","comment":""}],"relations":[{"entity":"join_venture","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"},{"entity":"enterprise","cardinality":"manyToOne","nullable":"not","ondelete":"cascade","onupdate":"cascade"}],"apidoc":[{"name":"Create enterprise_join_venture","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"enterprise_join_venture\":{\"id\":\"\",\"status\":\"\",\"join_venture.id\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}enterprise-join_venture.create","protocol":"","host":"{{base_url}}","path":["enterprise-join_venture.create"]},"description":"Create enterprise-join_venture"},"response":[]},{"name":"Get enterprise_join_venture","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}enterprise-join_venture.detail?id=","protocol":"","host":"{{base_url}}","path":["enterprise-join_venture.detail"],"query":[{"key":"id","value":""}]},"description":"Get enterprise-join_venture"},"response":[]},{"name":"List enterprise_join_venture","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}enterprise-join_venture.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["enterprise-join_venture.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update enterprise_join_venture","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"enterprise_join_venture\":{\"id\":\"\",\"status\":\"\",\"join_venture.id\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}enterprise-join_venture.update?id=","protocol":"","host":"{{base_url}}","path":["enterprise-join_venture.update"],"query":[{"key":"id","value":""}]},"description":"Update enterprise-join_venture"},"response":[]},{"name":"Delete enterprise_join_venture","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}enterprise-join_venture.delete?id=","protocol":"","host":"{{base_url}}","path":["enterprise-join_venture.delete"],"query":[{"key":"id","value":""}]},"description":"Delete enterprise-join_venture"},"response":[]}]}]},{"created_at":null,"updated_at":null,"deleted_at":null,"name":"ModuleUser","jsondata":{"name":"ModuleUser","project":"subcontractor","id":2},"readonly":"0","id":"33","component":{"id":null,"name":null,"project":{"created_at":null,"updated_at":null,"deleted_at":null,"id":null,"ref":null,"name":null,"label":null,"logo":null,"srclogo":"http:\/\/127.0.0.1\/toolrad2\/web\/assets\/no_image.jpg","customer":null,"template":null,"user":{"id":null,"username":null,"firstname":null,"lastname":null,"email":null,"lang":null,"token":null,"password":null,"telephone":null,"country":{"id":null,"name":null,"phonecode":null},"spacekola_ref":null},"components":[],"listmodule":[],"listclass":[],"classcount":0}},"entities":"1","listentity":[{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"firstname","designation":"","visibility":"","datatype":"string","size":"155","nullable":"not","formtype":"","comment":""},{"name":"lastname","designation":"","visibility":"","datatype":"string","size":"155","nullable":"not","formtype":"","comment":""},{"name":"sex","designation":"","visibility":"","datatype":"string","size":"5","nullable":"not","formtype":"","comment":""},{"name":"profile","designation":"","visibility":"","datatype":"string","size":"255","nullable":"default","formtype":"image","comment":"","nullablevalue":true}],"relation":[{"entity":"enterprise","cardinality":"oneToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"user","id":"101","module":{"id":"33","name":"ModuleUser"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"oneToOne"}],"apidoc":[{"name":"Create user","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"user\":{\"id\":\"\",\"firstname\":\"\",\"lastname\":\"\",\"sex\":\"\",\"profile\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}user.create","protocol":"","host":"{{base_url}}","path":["user.create"]},"description":"Create user"},"response":[]},{"name":"Get user","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}user.detail?id=","protocol":"","host":"{{base_url}}","path":["user.detail"],"query":[{"key":"id","value":""}]},"description":"Get user"},"response":[]},{"name":"List user","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}user.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["user.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update user","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"user\":{\"id\":\"\",\"firstname\":\"\",\"lastname\":\"\",\"sex\":\"\",\"profile\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}user.update?id=","protocol":"","host":"{{base_url}}","path":["user.update"],"query":[{"key":"id","value":""}]},"description":"Update user"},"response":[]},{"name":"Delete user","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}user.delete?id=","protocol":"","host":"{{base_url}}","path":["user.delete"],"query":[{"key":"id","value":""}]},"description":"Delete user"},"response":[]}]}]},{"created_at":null,"updated_at":null,"deleted_at":null,"name":"ModulePost","jsondata":{"name":"ModulePost","project":"subcontractor","id":3},"readonly":"0","id":"34","component":{"id":null,"name":null,"project":{"created_at":null,"updated_at":null,"deleted_at":null,"id":null,"ref":null,"name":null,"label":null,"logo":null,"srclogo":"http:\/\/127.0.0.1\/toolrad2\/web\/assets\/no_image.jpg","customer":null,"template":null,"user":{"id":null,"username":null,"firstname":null,"lastname":null,"email":null,"lang":null,"token":null,"password":null,"telephone":null,"country":{"id":null,"name":null,"phonecode":null},"spacekola_ref":null},"components":[],"listmodule":[],"listclass":[],"classcount":0}},"entities":"2","listentity":[{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"content","designation":"","visibility":"","datatype":"text","size":"","nullable":"default","formtype":"","comment":"","nullablevalue":true},{"name":"image","designation":"","visibility":"","datatype":"string","size":"255","nullable":"default","formtype":"","comment":"","nullablevalue":true}],"relation":[{"entity":"enterprise","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"post","id":7,"module":{"id":"34","name":"ModulePost"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"manyToOne"}],"apidoc":[{"name":"Create post","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"post\":{\"id\":\"\",\"content\":\"\",\"image\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}post.create","protocol":"","host":"{{base_url}}","path":["post.create"]},"description":"Create post"},"response":[]},{"name":"Get post","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}post.detail?id=","protocol":"","host":"{{base_url}}","path":["post.detail"],"query":[{"key":"id","value":""}]},"description":"Get post"},"response":[]},{"name":"List post","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}post.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["post.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update post","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"post\":{\"id\":\"\",\"content\":\"\",\"image\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}post.update?id=","protocol":"","host":"{{base_url}}","path":["post.update"],"query":[{"key":"id","value":""}]},"description":"Update post"},"response":[]},{"name":"Delete post","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}post.delete?id=","protocol":"","host":"{{base_url}}","path":["post.delete"],"query":[{"key":"id","value":""}]},"description":"Delete post"},"response":[]}]},{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"content","designation":"","visibility":"","datatype":"text","size":"","nullable":"not","formtype":"","comment":""}],"relation":[{"entity":"post","cardinality":"manyToOne"},{"entity":"enterprise","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"comment","id":12,"module":{"id":"34","name":"ModulePost"},"projectid":"5","relations":[{"entity":"post","cardinality":"manyToOne"},{"entity":"enterprise","cardinality":"manyToOne"}],"apidoc":[{"name":"Create comment","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"comment\":{\"id\":\"\",\"content\":\"\",\"post.id\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}comment.create","protocol":"","host":"{{base_url}}","path":["comment.create"]},"description":"Create comment"},"response":[]},{"name":"Get comment","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}comment.detail?id=","protocol":"","host":"{{base_url}}","path":["comment.detail"],"query":[{"key":"id","value":""}]},"description":"Get comment"},"response":[]},{"name":"List comment","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}comment.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["comment.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update comment","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"comment\":{\"id\":\"\",\"content\":\"\",\"post.id\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}comment.update?id=","protocol":"","host":"{{base_url}}","path":["comment.update"],"query":[{"key":"id","value":""}]},"description":"Update comment"},"response":[]},{"name":"Delete comment","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}comment.delete?id=","protocol":"","host":"{{base_url}}","path":["comment.delete"],"query":[{"key":"id","value":""}]},"description":"Delete comment"},"response":[]}]}]},{"created_at":null,"updated_at":null,"deleted_at":null,"name":"ModuleJob","jsondata":{"name":"ModuleJob","project":"subcontractor","id":4},"readonly":"0","id":"35","component":{"id":null,"name":null,"project":{"created_at":null,"updated_at":null,"deleted_at":null,"id":null,"ref":null,"name":null,"label":null,"logo":null,"srclogo":"http:\/\/127.0.0.1\/toolrad2\/web\/assets\/no_image.jpg","customer":null,"template":null,"user":{"id":null,"username":null,"firstname":null,"lastname":null,"email":null,"lang":null,"token":null,"password":null,"telephone":null,"country":{"id":null,"name":null,"phonecode":null},"spacekola_ref":null},"components":[],"listmodule":[],"listclass":[],"classcount":0}},"entities":"3","listentity":[{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"description","designation":"","visibility":"","datatype":"text","size":"","nullable":"not","formtype":"","comment":""}],"relation":[{"entity":"enterprise","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"job","id":"104","module":{"id":"35","name":"ModuleJob"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"manyToOne"}],"apidoc":[{"name":"Create job","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"job\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}job.create","protocol":"","host":"{{base_url}}","path":["job.create"]},"description":"Create job"},"response":[]},{"name":"Get job","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}job.detail?id=","protocol":"","host":"{{base_url}}","path":["job.detail"],"query":[{"key":"id","value":""}]},"description":"Get job"},"response":[]},{"name":"List job","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}job.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["job.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update job","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"job\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}job.update?id=","protocol":"","host":"{{base_url}}","path":["job.update"],"query":[{"key":"id","value":""}]},"description":"Update job"},"response":[]},{"name":"Delete job","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}job.delete?id=","protocol":"","host":"{{base_url}}","path":["job.delete"],"query":[{"key":"id","value":""}]},"description":"Delete job"},"response":[]}]},{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"description","designation":"","visibility":"","datatype":"text","size":"","nullable":"not","formtype":"","comment":""}],"relation":[{"entity":"enterprise","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"offer","id":"105","module":{"id":"35","name":"ModuleJob"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"manyToOne"}],"apidoc":[{"name":"Create offer","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"offer\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}offer.create","protocol":"","host":"{{base_url}}","path":["offer.create"]},"description":"Create offer"},"response":[]},{"name":"Get offer","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}offer.detail?id=","protocol":"","host":"{{base_url}}","path":["offer.detail"],"query":[{"key":"id","value":""}]},"description":"Get offer"},"response":[]},{"name":"List offer","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}offer.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["offer.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update offer","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"offer\":{\"id\":\"\",\"description\":\"\",\"enterprise.id\":\"\"}}"},"url":{"raw":"{{base_url}}offer.update?id=","protocol":"","host":"{{base_url}}","path":["offer.update"],"query":[{"key":"id","value":""}]},"description":"Update offer"},"response":[]},{"name":"Delete offer","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}offer.delete?id=","protocol":"","host":"{{base_url}}","path":["offer.delete"],"query":[{"key":"id","value":""}]},"description":"Delete offer"},"response":[]}]},{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "}],"relation":[{"entity":"enterprise","cardinality":"manyToOne"},{"entity":"offer","cardinality":"manyToOne"}],"methods":[{"name":"","datatype":"","comment":""}],"name":"submission","id":"107","module":{"id":"35","name":"ModuleJob"},"projectid":"5","relations":[{"entity":"enterprise","cardinality":"manyToOne"},{"entity":"offer","cardinality":"manyToOne"}],"apidoc":[{"name":"Create submission","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"submission\":{\"id\":\"\",\"enterprise.id\":\"\",\"offer.id\":\"\"}}"},"url":{"raw":"{{base_url}}submission.create","protocol":"","host":"{{base_url}}","path":["submission.create"]},"description":"Create submission"},"response":[]},{"name":"Get submission","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}submission.detail?id=","protocol":"","host":"{{base_url}}","path":["submission.detail"],"query":[{"key":"id","value":""}]},"description":"Get submission"},"response":[]},{"name":"List submission","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}submission.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["submission.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update submission","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"submission\":{\"id\":\"\",\"enterprise.id\":\"\",\"offer.id\":\"\"}}"},"url":{"raw":"{{base_url}}submission.update?id=","protocol":"","host":"{{base_url}}","path":["submission.update"],"query":[{"key":"id","value":""}]},"description":"Update submission"},"response":[]},{"name":"Delete submission","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}submission.delete?id=","protocol":"","host":"{{base_url}}","path":["submission.delete"],"query":[{"key":"id","value":""}]},"description":"Delete submission"},"response":[]}]}]},{"created_at":null,"updated_at":null,"deleted_at":null,"name":"ModuleData","jsondata":{"name":"ModuleData","project":"subcontractor","id":2},"readonly":"0","id":"36","component":{"id":null,"name":null,"project":{"created_at":null,"updated_at":null,"deleted_at":null,"id":null,"ref":null,"name":null,"label":null,"logo":null,"srclogo":"http:\/\/127.0.0.1\/toolrad2\/web\/assets\/no_image.jpg","customer":null,"template":null,"user":{"id":null,"username":null,"firstname":null,"lastname":null,"email":null,"lang":null,"token":null,"password":null,"telephone":null,"country":{"id":null,"name":null,"phonecode":null},"spacekola_ref":null},"components":[],"listmodule":[],"listclass":[],"classcount":0}},"entities":"0","listentity":[{"attribut":[{"name":"id","designation":"","visibility":"","datatype":"integer","size":"","nullable":"not","formtype":"","comment":"Default identifier by auto-increment "},{"name":"name","designation":"","visibility":"","datatype":"string","size":"123","nullable":"not","formtype":"","comment":""},{"name":"description","designation":"","visibility":"","datatype":"text","size":"","nullable":"default","formtype":"","comment":"","nullablevalue":true}],"relation":[],"methods":[{"name":"","datatype":"","comment":""}],"name":"activity_sector","id":"110","module":{"id":"36","name":"ModuleData"},"projectid":"5","relations":[],"apidoc":[{"name":"Create activity_sector","request":{"method":"POST","header":[],"body":{"mode":"raw","raw":"{\"activity_sector\":{\"id\":\"\",\"name\":\"\",\"description\":\"\"}}"},"url":{"raw":"{{base_url}}activity-sector.create","protocol":"","host":"{{base_url}}","path":["activity-sector.create"]},"description":"Create activity-sector"},"response":[]},{"name":"Get activity_sector","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}activity-sector.detail?id=","protocol":"","host":"{{base_url}}","path":["activity-sector.detail"],"query":[{"key":"id","value":""}]},"description":"Get activity-sector"},"response":[]},{"name":"List activity_sector","request":{"method":"GET","header":[],"url":{"raw":"{{base_url}}activity-sector.lazyloading?dfilters=on&next=1&per_page=10","protocol":"","host":"{{base_url}}","path":["activity-sector.lazyloading"],"query":[{"key":"dfilters","value":"on"},{"key":"next","value":"1"},{"key":"per_page","value":"10"}]},"description":"API documentation for LibrairieNum\u00e9rique\n\nlazyloading api, how it works?\n\nthe lazyloading api is used to manage different kind of reading operation, such as filtering, pagination, order by a parameter and so on.\n\nTo enalbe lazyloading, you must specify the parameter dfilters=true and then give the attribut with following nomenclatura :\n\nattributname:opt=value\n\nattributname can be: \n- the attribut of the current class ex: name:eq=value\n- the attribut of an imbricate class following the nomenclatura: entity.attribute:opt=value ex: category.name:eq=acategory\n\nopt can be:\n- eq : =\n- lt : <\n- gt : >\n- get: >=\n- let: <=\n- lkl: like %value\n- lkr: like value%\n- btw: between (). for this option, value is specified as value1_value2 the '_' makes the separation between value1 and value2\n\nif none of those possible value of opt is specified, the request will be traited with operator like %value% by default\n\nexample:\nlet's have the class book_library:{id, stock, book:{name, price, ..., category:{}}, library: {id, name, ...}}\n\nfind a book of a specific library with id or name\n request\n - with id: {{prod_url}}book-library&dfilters=on&library.id:eq=5\n - with name: {{prod_url}}book-library&dfilters=on&library.id:opt=name\n - ordering by book id desc: {{prod_url}}book-library&dfilters=on&order=book.id desc\n\nto handle pagination you need 2 paramters: next and per_page those parameter work together (the dfilters is optional if you are just doing pagination without any other kind of filtering)\n\nexample:\nlet's have this request: go to the 5th page of book-library a print 20 element per page\n- {{prod_url}}book-library&next=5&per_page=20\n\n"},"response":[]},{"name":"Update activity_sector","request":{"method":"PUT","header":[],"body":{"mode":"raw","raw":"{\"activity_sector\":{\"id\":\"\",\"name\":\"\",\"description\":\"\"}}"},"url":{"raw":"{{base_url}}activity-sector.update?id=","protocol":"","host":"{{base_url}}","path":["activity-sector.update"],"query":[{"key":"id","value":""}]},"description":"Update activity-sector"},"response":[]},{"name":"Delete activity_sector","request":{"method":"DELETE","header":[],"url":{"raw":"{{base_url}}activity-sector.delete?id=","protocol":"","host":"{{base_url}}","path":["activity-sector.delete"],"query":[{"key":"id","value":""}]},"description":"Delete activity-sector"},"response":[]}]}]}]}