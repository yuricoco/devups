<?php
// user \dclass\devups\model\Model;

/**
 * @Entity @Table(name="tree_item_image")
 * */
class Tree_item_image extends Model implements JsonSerializable
{

    /**
     * @Id @GeneratedValue @Column(type="integer")
     * @var int
     * */
    protected $id;
    /**
     * @Column(name="width_size", type="string" , length=255 , nullable=true)
     * @var string
     **/
    protected $width_size;

    /**
     * @ManyToOne(targetEntity="\Tree_item")
     * @var \Tree_item
     */
    public $tree_item;

    /**
     * @ManyToOne(targetEntity="\Dv_image")
     * @var \Dv_image
     */
    public $image;


    public function __construct($id = null)
    {

        if ($id) {
            $this->id = $id;
        }

        $this->tree_item = new Tree_item();
        $this->image = new Dv_image();
    }

    public function getId()
    {
        return $this->id;
    }

    public function getWidth_size()
    {
        return $this->width_size;
    }

    public function setWidth_size($width_size)
    {
        $this->width_size = $width_size;
    }

    /**
     *  manyToOne
     * @return \Tree_item
     */
    function getTree_item()
    {
        $this->tree_item = $this->tree_item->__show();
        return $this->tree_item;
    }

    function setTree_item(\Tree_item $tree_item)
    {
        $this->tree_item = $tree_item;
    }

    /**
     *  manyToOne
     * @return \Dv_image
     */
    function getImage()
    {
        $this->image = $this->image->__show();
        return $this->image;
    }

    function setImage(\Dv_image $image)
    {
        $this->image = $image;
    }


    public function jsonSerialize()
    {
        return [
            'id' => $this->id,
            'width_size' => $this->width_size,
            //'tree_item' => $this->tree_item,
            'image' => $this->image,
            'srcImage_100' => $this->image->srcImage("100_"),
        ];
    }

    public function uploadImage($file)
    {

        //$dfile = Dfile::init("croppedImage");
        //$data = file_get_contents($dfile->tmp_name);
        //\DClass\lib\Util::writein($data, "uploads/slider/test.png");
        $dfile = Dfile::init($file);
        if (!$dfile->errornofile) {

            $filedir = "treeitem/";
            $url = $dfile
                //->setfile_name($this->id . "-slider.jpg")
                ->sanitize()
                //->setUploaddir($filedir)
                ->saveoriginal(false)
                ->addresize([100, 100], "100_", "", false)
                ->addresize([150, 150], "150_", "", false)
                ->addresize([50, 50], "50_", "", false)
                //->resizethisimage("slider/test.png");
                ->moveto($filedir);

            if (!$url['success']) {
                return array('success' => false,
                    'error' => $url);
            }

            if ($this->image->getId())
                $image = $this->image;
            else
                $image = new Dv_image();

            //$image->folder = Tree_item::mainmenu("folder")->andwhere("this.name", "slider")->__getOne();
            $image->setImage($url["file"]["hashname"]);
            $image->setUploaddir($filedir);
            $image->setSize($url["file"]["imagesize"]);
            $image->__save();

            $this->image = $image;

        }

    }

    public function __delete($exec = true)
    {
        //Dfile::deleteFile($this->image, $this->uploaddir);
        Dfile::deleteFile("150_" . $this->image->getImage(), $this->image->getUploaddir());
        Dfile::deleteFile("50_" . $this->image->getImage(), $this->image->getUploaddir());
        Dfile::deleteFile("100_" . $this->image->getImage(), $this->image->getUploaddir());

        return parent::__delete($exec); // TODO: Change the autogenerated stub
    }

}
