<?php
// user \dclass\devups\model\Model;

/**
 * @Entity @Table(name="user")
 * */
class User extends UserCore implements JsonSerializable
{

    public static $currentid;
    /**
     * @Id @GeneratedValue @Column(type="integer")
     * @var int
     * */
    protected $id;

    /**
     * @Column(name="address", type="string", length=255 , nullable=true )
     * @var string
     **/
    protected $address;

    /**
     * @ManyToOne(targetEntity="\Country")
     * @JoinColumn(onDelete="set null")
     * @var \Country
     */
    public $country;


    public function __construct($id = null)
    {

        if ($id) {
            $this->id = $id;
        }

        $this->country = new Country();

    }

    public function getId()
    {
        return $this->id;
    }

    public function setConfirm($confirm)
    {

        if ($this->getPassword() != md5($confirm))
            return t("Mot de passe incorrect. veuillez reessayer svp!");

    }

    /**
     * @return string
     */
    public function getSpacekolaRef()
    {
        return $this->spacekola_ref;
    }

    /**
     * @param string $spacekola_ref
     */
    public function setSpacekola_ref($spacekola_ref)
    {
        $this->spacekola_ref = $spacekola_ref;
    }

    /**
     * @return Status
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * @param Status $status
     */
    public function setStatus(Status $status)
    {
        $this->status = $status;
    }


    public function setUpdatePassword($pwd)
    {
        if ($pwd)
            $this->password = (sha1($pwd));
    }

    public function getSexe()
    {
        return $this->sexe;
    }

    public function setSexe($sexe)
    {
        $this->sexe = $sexe;
    }

    public function getPhonenumber()
    {
        return $this->phonenumber;
    }

    public function getIs_activated()
    {
        return $this->is_activated;
    }

    public function setIs_activated($is_activated)
    {
        $this->is_activated = $is_activated;
    }

    public function setCountry_iso($iso_code)
    {
        $this->country = Country::getbyattribut("iso", $iso_code);
    }

    public function setActivationcode($activationcode)
    {

        $this->activationcode = sha1($activationcode);
        $this->activationcode_expired_at = date("Y-m-d H:i:s", strtotime("+3 hours", strtotime(date("Y-m-d H:i:s"))));

    }


    public function getBirthdate()
    {
        return $this->birthdate;
    }

    public function setBirthdate($birthdate)
    {
        $this->birthdate = $birthdate;
    }

    /**
     *  manyToOne
     * @return \Country
     */
    function getCountry()
    {
        $this->country = $this->country->__show();
        return $this->country;
    }

    function setCountry(\Country $country)
    {
        $this->country = $country;
    }

    public static function sanitizePhonenumber($phonenumber, $phone_code)
    {
        $telephone = str_replace("+" . $phone_code, "", "+" . $phonenumber);
        return str_replace("+", "", $telephone);
    }

    function userdata()
    {
        return [
            'id' => $this->id,
            'firstname' => $this->firstname,
            'lastname' => $this->lastname,
            'username' => $this->username,
            'spacekola_ref' => $this->spacekola_ref,
        ];
    }

    public function jsonSerialize()
    {
        return [
            'id' => $this->id,
            'firstname' => $this->firstname,
            //'spacekola_ref' => $this->spacekola_ref,
            'lastname' => $this->lastname,
            'email' => $this->email,
            'country' => $this->country,
            'phonenumber' => $this->phonenumber,
            'password' => $this->password,
            'resettingpassword' => $this->resettingpassword,
            'is_activated' => $this->is_activated,
            'activationcode' => $this->activationcode,
            //'birthdate' => $this->birthdate,
            'lang' => $this->lang,
            'username' => $this->username,
            'api_key' => $this->api_key,
            'session_token' => $this->session_token,

        ];
    }

    public function __insert()
    {
        $this->is_activated = 0;

        parent::__insert(); // TODO: Change the autogenerated stub

        return $this->id;
    }

    /**
     * @return \User
     */
    public static function userapp()
    {
        if (isset($_SESSION['USERID']))
            return User::find($_SESSION['USERID']);

        return new \User();
    }

    public function updateSession()
    {
        $_SESSION['USER'] = serialize(User::find($this->id));
    }

    public function isActivated()
    {
        return boolval((int)$this->is_activated);
    }

    /**
     * return the phonenumber with the country phone code.
     * @return string
     */
    public function getTelephone()
    {
        return $this->country->getPhonecode() . $this->phonenumber;
    }

    public function notificationData()
    {
        return [
            'firstname' => $this->firstname,
            //'spacekola_ref' => $this->spacekola_ref,
            'lastname' => $this->lastname,
            'email' => $this->email,
        ];
    }

    public function activateaccount($activationcode, $url = ""){
        if ($this->isActivated())
            return ["success" => true, "url" => route('home')];
        else {
            $code = sha1($activationcode);
            if ($code == $this->getActivationcode()) {
                //if (substr($code, 0, 5) == $appuser->getActivationcode()) {

                $this->setIs_activated(1);
                //$appuser->setLocked(false);
                $this->__update();
                //updatesession($appuser);
                $_SESSION[USERAPP] = serialize($this);

                return ["success" => true, "url" => $url];
            }
        }

        return [
            "success" => false,
            'error' => t("Le code d'activation n'est pas valide. Veuillez entrer de nouveau ou alors renvoyer un autre code")
        ];

    }

}
